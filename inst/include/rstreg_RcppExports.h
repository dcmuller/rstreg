// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_rstreg_RCPPEXPORTS_H_GEN_
#define RCPP_rstreg_RCPPEXPORTS_H_GEN_

#include <RcppArmadillo.h>
#include <Rcpp.h>

namespace rstreg {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("rstreg", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("rstreg", "_rstreg_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in rstreg");
            }
        }
    }

    inline arma::mat weibull_gr(const arma::vec& theta, const arma::mat& X, Nullable<arma::mat> Z, const arma::vec& tt0, const arma::vec& tt, const arma::vec& d, const Nullable<arma::vec>& pfixed, const arma::vec& w, const arma::vec& offset) {
        typedef SEXP(*Ptr_weibull_gr)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_weibull_gr p_weibull_gr = NULL;
        if (p_weibull_gr == NULL) {
            validateSignature("arma::mat(*weibull_gr)(const arma::vec&,const arma::mat&,Nullable<arma::mat>,const arma::vec&,const arma::vec&,const arma::vec&,const Nullable<arma::vec>&,const arma::vec&,const arma::vec&)");
            p_weibull_gr = (Ptr_weibull_gr)R_GetCCallable("rstreg", "_rstreg_weibull_gr");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_weibull_gr(Shield<SEXP>(Rcpp::wrap(theta)), Shield<SEXP>(Rcpp::wrap(X)), Shield<SEXP>(Rcpp::wrap(Z)), Shield<SEXP>(Rcpp::wrap(tt0)), Shield<SEXP>(Rcpp::wrap(tt)), Shield<SEXP>(Rcpp::wrap(d)), Shield<SEXP>(Rcpp::wrap(pfixed)), Shield<SEXP>(Rcpp::wrap(w)), Shield<SEXP>(Rcpp::wrap(offset)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::mat >(rcpp_result_gen);
    }

    inline arma::mat weibull_hess(const arma::vec& theta, const arma::mat& X, Nullable<arma::mat> Z, const arma::vec& tt0, const arma::vec& tt, const arma::vec& d, const Nullable<arma::vec>& pfixed, const arma::vec& w, const arma::vec& offset) {
        typedef SEXP(*Ptr_weibull_hess)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_weibull_hess p_weibull_hess = NULL;
        if (p_weibull_hess == NULL) {
            validateSignature("arma::mat(*weibull_hess)(const arma::vec&,const arma::mat&,Nullable<arma::mat>,const arma::vec&,const arma::vec&,const arma::vec&,const Nullable<arma::vec>&,const arma::vec&,const arma::vec&)");
            p_weibull_hess = (Ptr_weibull_hess)R_GetCCallable("rstreg", "_rstreg_weibull_hess");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_weibull_hess(Shield<SEXP>(Rcpp::wrap(theta)), Shield<SEXP>(Rcpp::wrap(X)), Shield<SEXP>(Rcpp::wrap(Z)), Shield<SEXP>(Rcpp::wrap(tt0)), Shield<SEXP>(Rcpp::wrap(tt)), Shield<SEXP>(Rcpp::wrap(d)), Shield<SEXP>(Rcpp::wrap(pfixed)), Shield<SEXP>(Rcpp::wrap(w)), Shield<SEXP>(Rcpp::wrap(offset)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::mat >(rcpp_result_gen);
    }

    inline void weibull_inplace(double& llval, arma::mat& grObsval, arma::vec& grval, arma::mat& hessval, const arma::vec& theta, const arma::mat& X, const Nullable<arma::mat>& Z, const arma::vec& tt0, const arma::vec& tt, const arma::vec& d, const Nullable<arma::vec>& pfixed, const arma::vec& w, const arma::vec& offset) {
        typedef SEXP(*Ptr_weibull_inplace)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_weibull_inplace p_weibull_inplace = NULL;
        if (p_weibull_inplace == NULL) {
            validateSignature("void(*weibull_inplace)(double&,arma::mat&,arma::vec&,arma::mat&,const arma::vec&,const arma::mat&,const Nullable<arma::mat>&,const arma::vec&,const arma::vec&,const arma::vec&,const Nullable<arma::vec>&,const arma::vec&,const arma::vec&)");
            p_weibull_inplace = (Ptr_weibull_inplace)R_GetCCallable("rstreg", "_rstreg_weibull_inplace");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_weibull_inplace(Shield<SEXP>(Rcpp::wrap(llval)), Shield<SEXP>(Rcpp::wrap(grObsval)), Shield<SEXP>(Rcpp::wrap(grval)), Shield<SEXP>(Rcpp::wrap(hessval)), Shield<SEXP>(Rcpp::wrap(theta)), Shield<SEXP>(Rcpp::wrap(X)), Shield<SEXP>(Rcpp::wrap(Z)), Shield<SEXP>(Rcpp::wrap(tt0)), Shield<SEXP>(Rcpp::wrap(tt)), Shield<SEXP>(Rcpp::wrap(d)), Shield<SEXP>(Rcpp::wrap(pfixed)), Shield<SEXP>(Rcpp::wrap(w)), Shield<SEXP>(Rcpp::wrap(offset)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
    }

    inline arma::vec weibull_ll(const arma::vec& theta, const arma::mat& X, Nullable<arma::mat> Z, const arma::vec& tt0, const arma::vec& tt, const arma::vec& d, const Nullable<arma::vec>& pfixed, const arma::vec& w, const arma::vec& offset) {
        typedef SEXP(*Ptr_weibull_ll)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_weibull_ll p_weibull_ll = NULL;
        if (p_weibull_ll == NULL) {
            validateSignature("arma::vec(*weibull_ll)(const arma::vec&,const arma::mat&,Nullable<arma::mat>,const arma::vec&,const arma::vec&,const arma::vec&,const Nullable<arma::vec>&,const arma::vec&,const arma::vec&)");
            p_weibull_ll = (Ptr_weibull_ll)R_GetCCallable("rstreg", "_rstreg_weibull_ll");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_weibull_ll(Shield<SEXP>(Rcpp::wrap(theta)), Shield<SEXP>(Rcpp::wrap(X)), Shield<SEXP>(Rcpp::wrap(Z)), Shield<SEXP>(Rcpp::wrap(tt0)), Shield<SEXP>(Rcpp::wrap(tt)), Shield<SEXP>(Rcpp::wrap(d)), Shield<SEXP>(Rcpp::wrap(pfixed)), Shield<SEXP>(Rcpp::wrap(w)), Shield<SEXP>(Rcpp::wrap(offset)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::vec >(rcpp_result_gen);
    }

    inline List weibull_max_nr(const int maxiter, const arma::mat& X, const Nullable<arma::mat> Z, const arma::vec& tt0, const arma::vec& tt, const arma::vec& d, const Nullable<arma::vec> pfixed, const arma::vec& wt, const arma::vec& offset, const arma::vec& theta, const double eps, const double tol) {
        typedef SEXP(*Ptr_weibull_max_nr)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_weibull_max_nr p_weibull_max_nr = NULL;
        if (p_weibull_max_nr == NULL) {
            validateSignature("List(*weibull_max_nr)(const int,const arma::mat&,const Nullable<arma::mat>,const arma::vec&,const arma::vec&,const arma::vec&,const Nullable<arma::vec>,const arma::vec&,const arma::vec&,const arma::vec&,const double,const double)");
            p_weibull_max_nr = (Ptr_weibull_max_nr)R_GetCCallable("rstreg", "_rstreg_weibull_max_nr");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_weibull_max_nr(Shield<SEXP>(Rcpp::wrap(maxiter)), Shield<SEXP>(Rcpp::wrap(X)), Shield<SEXP>(Rcpp::wrap(Z)), Shield<SEXP>(Rcpp::wrap(tt0)), Shield<SEXP>(Rcpp::wrap(tt)), Shield<SEXP>(Rcpp::wrap(d)), Shield<SEXP>(Rcpp::wrap(pfixed)), Shield<SEXP>(Rcpp::wrap(wt)), Shield<SEXP>(Rcpp::wrap(offset)), Shield<SEXP>(Rcpp::wrap(theta)), Shield<SEXP>(Rcpp::wrap(eps)), Shield<SEXP>(Rcpp::wrap(tol)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

}

#endif // RCPP_rstreg_RCPPEXPORTS_H_GEN_
