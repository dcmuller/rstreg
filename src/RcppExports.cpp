// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// weibull_gr
arma::mat weibull_gr(const arma::vec& theta, const arma::mat& X, Nullable<arma::mat> Z, const arma::vec& tt0, const arma::vec& tt, const arma::vec& d, const Nullable<arma::vec>& pfixed, const arma::vec& w, const arma::vec& offset);
RcppExport SEXP _rstreg_weibull_gr(SEXP thetaSEXP, SEXP XSEXP, SEXP ZSEXP, SEXP tt0SEXP, SEXP ttSEXP, SEXP dSEXP, SEXP pfixedSEXP, SEXP wSEXP, SEXP offsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< Nullable<arma::mat> >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tt0(tt0SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tt(ttSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type d(dSEXP);
    Rcpp::traits::input_parameter< const Nullable<arma::vec>& >::type pfixed(pfixedSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type offset(offsetSEXP);
    rcpp_result_gen = Rcpp::wrap(weibull_gr(theta, X, Z, tt0, tt, d, pfixed, w, offset));
    return rcpp_result_gen;
END_RCPP
}
// weibull_hess
arma::mat weibull_hess(const arma::vec& theta, const arma::mat& X, Nullable<arma::mat> Z, const arma::vec& tt0, const arma::vec& tt, const arma::vec& d, const Nullable<arma::vec>& pfixed, const arma::vec& w, const arma::vec& offset);
RcppExport SEXP _rstreg_weibull_hess(SEXP thetaSEXP, SEXP XSEXP, SEXP ZSEXP, SEXP tt0SEXP, SEXP ttSEXP, SEXP dSEXP, SEXP pfixedSEXP, SEXP wSEXP, SEXP offsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< Nullable<arma::mat> >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tt0(tt0SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tt(ttSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type d(dSEXP);
    Rcpp::traits::input_parameter< const Nullable<arma::vec>& >::type pfixed(pfixedSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type offset(offsetSEXP);
    rcpp_result_gen = Rcpp::wrap(weibull_hess(theta, X, Z, tt0, tt, d, pfixed, w, offset));
    return rcpp_result_gen;
END_RCPP
}
// weibull_ll
arma::vec weibull_ll(const arma::vec& theta, const arma::mat& X, Nullable<arma::mat> Z, const arma::vec& tt0, const arma::vec& tt, const arma::vec& d, const Nullable<arma::vec>& pfixed, const arma::vec& w, const arma::vec& offset);
RcppExport SEXP _rstreg_weibull_ll(SEXP thetaSEXP, SEXP XSEXP, SEXP ZSEXP, SEXP tt0SEXP, SEXP ttSEXP, SEXP dSEXP, SEXP pfixedSEXP, SEXP wSEXP, SEXP offsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< Nullable<arma::mat> >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tt0(tt0SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tt(ttSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type d(dSEXP);
    Rcpp::traits::input_parameter< const Nullable<arma::vec>& >::type pfixed(pfixedSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type offset(offsetSEXP);
    rcpp_result_gen = Rcpp::wrap(weibull_ll(theta, X, Z, tt0, tt, d, pfixed, w, offset));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_rstreg_weibull_gr", (DL_FUNC) &_rstreg_weibull_gr, 9},
    {"_rstreg_weibull_hess", (DL_FUNC) &_rstreg_weibull_hess, 9},
    {"_rstreg_weibull_ll", (DL_FUNC) &_rstreg_weibull_ll, 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_rstreg(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
